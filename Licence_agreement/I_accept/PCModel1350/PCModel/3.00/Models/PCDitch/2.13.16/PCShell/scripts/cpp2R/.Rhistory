1/exp(1)
1/exp(2)
y=D(expression(2*exp(-x)),'x')
x=1
eval(y)
y=D(expression(log(1/(1+2*exp(-x))),'x')
x=1
eval(y)
y=D(expression(log((1/(1+2*exp(-x)))),'x')
x=1
eval(y)
y=D(expression(log((1/(1+2*exp(-x)))),'x')
x=1
eval(y)
log(1/(1+2*exp(-x)))
y=D(expression(log((1/(1+2*exp(-x))),'x')
x=1
eval(y)
log(1/(1+2*exp(-x)))
y=D(expression(log((1/(1+2*exp(-x))),'x')
x=1
eval(y)
log(1/(1+2*exp(-x)))
y=D(expression(log((1/(1+2*exp(-x))),'x')
y=D(expression(log(1/(1+2*exp(-x))),'x')
x=1
eval(y)
log(1/(1+2*exp(-x)))
y=D(expression(exp(-x)),'x')
x=1
eval(y)
kv <- 30
m <- 0.01
mumax <- 0.5
qmax <- 10
qmin <- 1
vmax <- 4
R* <-(kv*m(mumax-m)*mumax*vmax*qmax*qmin)/((mumax*qmax-m*(qmax-qmin))*(mumax*vmax-m*(vmax+mumax*qmin)))
R* <-(kv*m(mumax-m)*mumax*vmax*qmax*qmin)/((mumax*qmax-m*(qmax-qmin))*(mumax*vmax-m*(vmax+mumax*qmin)))
x1<- (kv*m(mumax-m)*mumax*vmax*qmax*qmin)
x1<- (kv*m/*(mumax-m)*mumax*vmax*qmax*qmin)
x1<- (kv*m*(mumax-m)*mumax*vmax*qmax*qmin)
x2 <- ((mumax*qmax-m*(qmax-qmin))*(mumax*vmax-m*(vmax+mumax*qmin)))
R* <-x1/x2
R* <- x1/x2
R_star <- x1/x2
qmax <- 1000000000000000000
qmin <- 1e-10
vmax <- 4
x1<- (kv*m*(mumax-m)*mumax*vmax*qmax*qmin)
x2 <- ((mumax*qmax-m*(qmax-qmin))*(mumax*vmax-m*(vmax+mumax*qmin)))
R_star <- x1/x2
library(Ryacas)
install.packages(Ryacas)
install.packages("Ryacas")
library(Ryacas)
x <- Sym("x") # define x as a symbolic variable
Limit(sin(x)/x, x, 0) # limit of sin(x)/x as x approaches 0
library(rSymPy)
install.packages("rSymPy")
library(rSymPy)
sympy("limit(sin(x)/x, x, 0)")
x <- Sym("x") # define x as a symbolic variable
sympy("limit(sin(x)/x, x, 0)")
yacas("Limit(n,Infinity)(1+(1/n))^n")
yacas("Limit(n,Infinity)(1+(1/n))^n")
aaa<- Limit(sin(x)/x, x, 0) # limit of sin(x)/x as x approaches 0
?Limit
x <- Sym("x") # define x as a symbolic variable
aaa<- Limit(sin(x)/x, x, 0) # limit of sin(x)/x as x approaches 0
aaa
aaa<- Limit(sin(x)/(x+1), x, 0) # limit of sin(x)/x as x approaches 0
aaa
sin(1)
sin(x)/(x+1)
?limit
?Limit
print(yacas(expression(integrate(1/x, x))))
demo("Ryacas")
expression(cos(x))
print(yacas(expression(deriv(sin, x))))
expression(cos(x))
print(yacas(expression(integrate(1/x, x))))
print(yacas("Integrate(x)1/x"))
x <- Sym("x"); Integrate(1/x, x)
acos(Sym("1/2"))
yacas(expression(Factor(x^2-1)))
exp1 <- expression(x^2 + 2 * x^2)
exp2 <- expression(2 * exp0)
exp3 <- expression(6 * pi * x)
exp4 <- expression((exp1 * (1 - sin(exp3))) / exp2)
print(yacas(exp4))
aaa<- Limit(Sin(x)/(x+1), x, 0) # limit of sin(x)/x as x approaches 0
x <- Sym("x") # define x as a symbolic variable
aaa<- Limit(Sin(x)/(x+1), x, 0) # limit of sin(x)/x as x approaches 0
aaa<- Limit(sin(x)/(x+1), x, 0) # limit of sin(x)/x as x approaches 0
aaa
yacas("Limit(h,0) (Sin(x+h)-Sin(x))/h")
?Ryacas
??Ryacas
library(Ryacas)
x <- Sym("x") # define x as a symbolic variable
Limit(sin(x)/x, x, 0) # limit of sin(x)/x as x approaches 0
expression(1)
Infinity
Limit(sin(x)/x, x, Inf) # limit of sin(x)/x as x approaches 0
Limit(sin(x)/x, x, 0) # limit of sin(x)/x as x approaches 0
Limit(x/(x+1),x,0)
y <- Sym("y")
Limit(sin(x+y)/y, x, 0,y,0) # limit of sin(x)/x as x approaches 0
Limit(sin(x+y)/y, x, 0) # limit of sin(x)/x as x approaches 0
y <- Sym("y")
Limit((Limit(sin(x+y)/y, x, 0)),y,0)
kv <- 30
m <- 0.01
mumax <- 0.5
qmax <- 1000000000000000000
qmin <- 1e-10
vmax <- 4
R_star <- (kv*m*(mumax-m)*mumax*vmax*qmax*qmin)/((mumax*qmax-m*(qmax-qmin))*(mumax*vmax-m*(vmax+mumax*qmin)))
Limit(((kv*m*(mumax-m)*mumax*vmax*qmax*qmin)/((mumax*qmax-m*(qmax-qmin))*(mumax*vmax-m*(vmax+mumax*qmin)))),qmin,0)
aaa<- Limit(((kv*m*(mumax-m)*mumax*vmax*qmax*qmin)/((mumax*qmax-m*(qmax-qmin))*(mumax*vmax-m*(vmax+mumax*qmin)))),qmin,0)
aaa
qmin <- Sym("qmin")
qmax <- Sym("qmax")
aaa<- Limit(((kv*m*(mumax-m)*mumax*vmax*qmax*qmin)/((mumax*qmax-m*(qmax-qmin))*(mumax*vmax-m*(vmax+mumax*qmin)))),qmin,0)
qmin <- Sym("qmin")
qmax <- Sym("qmax")
Limit(((kv*m*(mumax-m)*mumax*vmax*qmax*qmin)/((mumax*qmax-m*(qmax-qmin))*(mumax*vmax-m*(vmax+mumax*qmin)))),qmin,0)
kv <- 30
m <- 0.01
mumax <- 0.5
vmax <- 4
qmin <- Sym("qmin")
qmax <- Sym("qmax")
Limit(((kv*m*(mumax-m)*mumax*vmax*qmax*qmin)/((mumax*qmax-m*(qmax-qmin))*(mumax*vmax-m*(vmax+mumax*qmin)))),qmin,0)
Limit(((kv*m*(mumax-m)*mumax*vmax*qmax*qmin)/((mumax*qmax-m*(qmax-qmin))*(mumax*vmax-m*(vmax+mumax*qmin)))),qmax,Inf)
qmax_inf <- Limit(((kv*m*(mumax-m)*mumax*vmax*qmax*qmin)/((mumax*qmax-m*(qmax-qmin))*(mumax*vmax-m*(vmax+mumax*qmin)))),qmax,Inf)
Limit(qmax_inf, qmin, 0)
a<- expression(x+1)
a
a<- expression(R_star)
a
a<- expression((kv*m*(mumax-m)*mumax*vmax*qmax*qmin)/((mumax*qmax-m*(qmax-qmin))*(mumax*vmax-m*(vmax+mumax*qmin))))
qmin <- Sym("qmin")
qmax <- Sym("qmax")
Limit(a, qmin, 0)
Limit(a, qmax, 0)
Limit(a, qmax, 1)
Limit(a, qmax, Inf)
Limit(Limit(a, qmax, Inf),qmin,0)
z <- quote(y <- x * 10)
z
yacas("Subst(x,Cos(a))x+x")
?eval
eval(1+2)
eval(x+y)
x<- 1
y<- 2
eval(x+y)
exp1 <- yacas(expression(Factor(x^2 - 1)))
expression((x + 1) * (x - 1))
Eval(exp1, list(x = 4))
yacas("D(x)Sin(x)")
x <- Sym("x")
x + 4
yacas("Solve(x/(1+x) == a, x)")
yacas("Solve(x+y) == 2*x +z +1,z")
yacas("Solve(x+y) == 2*x +z +1,z")
yacas("Solve(x+y) == 2*x +z +1,y")
x <- Sym("x")
y <- Sym("x")
z <- Sym("z")
yacas("Solve(x+y) == 2*x +z +1, y")
yacas("Solve(x/(1+x) == a, x)")
yacas("Solve(x+y) - 2*x -z == 1, y")
yacas("Solve(x+y) - 2*x -x == 1, y")
yacas("Solve((x+y) - 2*x -x) == 1, y")
y <- Sym("y")
yacas("Solve((x+y) - 2*x -x) == 1, y")
yacas("Solve(x/(1+x) == a, x)")
yacas("Solve((x+x) - 2*x -x) == a, x")
yacas("Solve((x+x) -x) == a, x")
yacas("Solve(x+x-x) == a, x")
yacas("Solve(x+x+x) == a, x")
yacas("Solve(x/(x+x) == a, x")
yacas("Solve(x/(x+1) == a, x")
yacas("Solve(x/(x+1) == a, x)")
yacas("Solve(x+y == y+z, x)")
yacas("Solve(x+y == 2 *x +z+1, x)")
yacas("Solve(x+y == 2 *x +z+1, y)")
yacas("Solve(x+y == ln(y), y)")
yacas("Solve(x+y == exp(y), y)")
yacas("Solve(x == exp(y), y)")
yacas("Solve(x == y+1, y)")
yacas("Solve(x == exp(y), y)")
yacas("Solve(x == y^2, y)")
log(10)
light_exp <- expression((1/(k*N*z))*(log((HL+Iin)/(HL+Iin * exp(-k*N*z)))))
Limit(light_exp,z,0)
z <- Sym("z")
light_exp <- expression((1/(k*N*z))*(log((HL+Iin)/(HL+Iin * exp(-k*N*z)))))
Limit(light_exp,z,0)
R_star <- (kv*m*(mumax-m)*mumax*vmax*qmax*qmin)/((mumax*qmax-m*(qmax-qmin))*(mumax*vmax-m*(vmax+mumax*qmin)))
qmin <- Sym("qmin")
qmax <- Sym("qmax")
R_star <- expression((kv*m*(mumax-m)*mumax*vmax*qmax*qmin)/((mumax*qmax-m*(qmax-qmin))*(mumax*vmax-m*(vmax+mumax*qmin))))
Limit(Limit(a, qmax, Inf),qmin,0)
k<-1.25
HL<-20
Iin<-10000
N <- Sym("N")
z <- Sym("z")
light_exp <- expression((1/(k*N*z))*(log((HL+Iin)/(HL+Iin * exp(-k*N*z)))))
Limit(light_exp,z,0)
rm(list = ls())
cat("\014")
library(tidyverse)
library(readxl)
library(gridExtra)
library(nlme)
library(dplyr)
library(car)
library(ggplot2)
library(devtools)
library(tidyverse)
library(readxl)
library(gridExtra)
library(nlme)
library(car)
library(dplyr)
library(ggplot2)
library(devtools)
library(easyGgplot2)
library(ggpubr)
library(survminer)
library(ggpubr)
library(survminer)
library(gtable)
library(grid)
library(cowplot)
data_SIL <- read_excel("P:/Manqi/PhD project/5 tpoics/research topic2/scenario/SIL_figure_R.xlsx")
library(gtable)
library(grid)
library(cowplot)
data_SIL <- read_excel("P:/Manqi/PhD project/5 tpoics/research topic2/scenario/SIL_figure_R.xlsx")
data_SIL$Load <- factor(data_SIL$Load)
data_SIL$Light <- factor(data_SIL$Light)
data_SIL$Models <- factor(data_SIL$Models,levels =c("BLOOM","PCLake"))
str(data_SIL)
data_SIL24 <- data_SIL  %>%
group_by(Load,Light,Models) %>%
summarise(
Chl = chla,
Q_P_Chl = p_chla,
Biomass = biomass,
Q_P_C = p_c,
Retention = retention,
R_star = rstar
)
pdf("Fig SIL_Figure.pdf", width = 8.0, height = 10.4)
p1 <- ggplot(data_SIL24,aes(x=Load, y= Chl, colour= Models, group= Models))+
xlab(NULL)+
ylab('Tot Chl a (mg/m^3)')+
theme(axis.title.y = element_text(size=40))+
#theme(axis.title.x = element_text())+
#theme(axis.text.x = element_text(color = 'white'))+
scale_y_continuous(breaks = seq(0,140,20))+
scale_x_discrete(breaks = seq(0,14,7))+
geom_point(aes(pch=Models,group=Models),size=2.5)+
geom_line(size=0.6)+
#  geom_errorbar(aes(ymin = TSS_m - TSS_se, ymax = TSS_m+ TSS_se),  width = 0.2,lwd=0.4) +
theme_bw()+
#facet_grid(~Light,scales = 'fixed',space ='fixed')+
facet_grid(~Light,scales="free_y",space ='fixed')+
theme(strip.text = element_text(colour = 'black',size = 24),strip.background = element_rect(fill = 'white',linetype=1,colour = 'white'),strip.placement = 'outside')+
theme(panel.grid = element_blank())+
theme(legend.position = c(0,.85),legend.justification = c(0,.85))+
theme(legend.text = element_text(colour = 'Black'),legend.background = element_rect(fill = NA))+
theme(legend.title=element_blank())+
geom_text(data=data.frame(x=0.6, y=140, label=c('a','b','c','d'),Light=c('10W','30W','60W','100W')),
aes(x,y,label=label),size=4,inherit.aes=FALSE)
x< c(1:100)
x <- c(1:100)
l<- 0.1
y=x/(x+l)
plot(x,y,type = l)
plot(x,y,type = line)
plot(x,y,type = "line")
x <- c(-100:100)
l<- 0.1
y=x/(x+l)
x <- c(-100:100)
l<- 0.1
y=x/(x+l)
plot(x,y,type = "line")
x <- seq(0,10,by=0.1)
l<- 0.1
y=x/(x+l)
plot(x,y,type = "line")
x <- seq(0,1,by=0.1)
l<- 0.1
y=x/(x+l)
plot(x,y,type = "line")
x <- seq(0,1,by=0.01)
l<- 0.1
y=x/(x+l)
plot(x,y,type = "line")
x<-seq(1,10,0.1)
y<-0.1*(x/(x+3))
plot(x,y)
x<-seq(1,100,0.1)
y<-0.1*(x/(x+3))
plot(x,y)
?plot
plot(x,y,type = 'l')
lines(x,y,type = 'l')
lines(x,sin(x))
lines(x,0.1*(x/(x+3)))
lines(x,0.1*(x/(x+3))
x<-seq(1,100,0.1)
y<-0.1*(x/(x+3))
lines(x,y,type = 'l')
lines(x,0.1*(x/(x+3))
plot(x,y,type = 'l')
x<-seq(1,100,0.1)
y<-0.1*(x/(x+3))
plot(x,y,type = 'l')
lines(x,0.1*(x/(x+3))
lines(x,0.1*(x/(x+5))
lines(x,0.1*(x/(x+5))
lines(x,0.1*(x/(x+5))
)
lines(x,(0.1*(x/(x+5))))
x<-seq(0,100,0.1)
y<-0.1*(x/(x+3))
plot(x,y,type = 'l')
lines(x,(0.1*(x/(x+5))))
x<-seq(0,100,0.1)
y<-0.1*(x/(x+1))
plot(x,y,type = 'l')
lines(x,(0.1*(x/(x+5))))
lines(x,(0.1*(x/(x+10))))
lines(x,(0.1*(x/(x+20))))
lines(x,(0.1*(x/(x+30))))
lines(x,0.01)
lines(x,y=0.01)
Rstar1 <- 1
Rstar2 <- 2
x <- seq(0,100,0.1)
y <- 1/(x-Rstar1)+Rstar2
plot(x,y,type = 'l')
yc<-rep(1,1001)
lines(x,yc)
yc<-rep(2,1001)
lines(x,yc)
lines(xc,y)
xc<-rep(1,1001)
lines(x,yc)
lines(xc,y)
?lines
lines(x,yc,col="red")
lines(xc,y,col="blue")
Rstar1 <- 1
Rstar2 <- 2
x <- seq(0,100,0.1)
y <- 1/(x-Rstar1)+Rstar2
plot(x,y,type = 'l')
yc<-rep(2,1001)
xc<-rep(1,1001)
lines(x,yc,col="red")
lines(xc,y,col="blue")
y2 <- 10/(x-Rstar1)+Rstar2
lines(x,y2,col="green")
y2 <- 5/(x-Rstar1)+Rstar2
lines(x,y2,col="yellow")
Rstar1 <- 0
Rstar2 <- 0
x <- seq(0,100,0.1)
y <- 1/(x-Rstar1)+Rstar2
plot(x,y,type = 'l')
yc<-rep(2,1001)
xc<-rep(1,1001)
lines(x,yc,col="red")
lines(xc,y,col="blue")
Rstar1 <- 0
Rstar2 <- 0
x <- seq(0,100,0.1)
y <- 1/(x-Rstar1)+Rstar2
plot(x,y,type = 'l')
Rstar1 <- 0
Rstar2 <- 0
x <- seq(0,100,0.1)
y <- 6/(x-Rstar1)+Rstar2
plot(x,y,type = 'l')
y2 <- 1/(x-Rstar1)+Rstar2
lines(x,y2,col="yellow")
install.packages("car")
library(car)
install.packages("carData")
library(car)
install.packages("carData")
?bias
??bias
library("ggplot2")
p <- ggplot(mydata, aes(speed, dist)) +
geom_point() +
stat_smooth(method = lm)
#http://www.sthda.com/english/articles/40-regression-analysis/166-predict-in-r-model-predictions-and-confidence-intervals/
# Load the data
data("cars", package = "datasets")
# Build the model
model <- lm(dist ~ speed, data = cars)
model
new.speeds <- data.frame(
speed = c(12, 19, 24)
)
predict(model, newdata = new.speeds, interval = "confidence")
predict(model, newdata = new.speeds, interval = "prediction")
# 0. Build linear model
data("cars", package = "datasets")
model <- lm(dist ~ speed, data = cars)
# 1. Add predictions
pred.int <- predict(model, interval = "prediction")
mydata <- cbind(cars, pred.int)
# 2. Regression line + confidence intervals
library("ggplot2")
p <- ggplot(mydata, aes(speed, dist)) +
geom_point() +
stat_smooth(method = lm)
# 3. Add prediction intervals
p + geom_line(aes(y = lwr), color = "red", linetype = "dashed")+
geom_line(aes(y = upr), color = "red", linetype = "dashed")
fileDATM		=	"PL613162 - default.xls"												              # file name of the DATM implementation
rm(list=ls())
dirHOME			=	"F:/Manqi/software/PCLakeMQ_topic3/Licence_agreement/I_accept/"				# location of the PCModel1350 folder
fileDATM		=	"PL613162 - default.xls"												              # file name of the DATM implementation
source(paste(dirHOME,"PCModel1350/PCModel/3.00/Models/PCLake/6.13.16/PCShell/scripts/R_system/functions_PCLake.R",sep=""))
lDATM_SETTINGS		=	PCModelReadDATMFile(dirHOME=dirHOME,
fileDATM=fileDATM)
lMODEL_SETUP		=	PCModelSetup(
dfSTATES=lDATM_SETTINGS$states,
dfPARAMS=lDATM_SETTINGS$params,
dfAUXIL=lDATM_SETTINGS$auxils,
dfRUNSETTINGS=lDATM_SETTINGS$run_settings,
dirHOME=dirHOME,
sediment_type       = 	0,                          # available sediment types: 0=default settings (/source_cpp/*sp.cpp), 1=clay, 2=peat, 3=sand
work_case           =	"R_base_work_case",         # name of output folder (work case)
modelname 			=	"_org",					              	# name of the model (suffix to specific model files)
tGENERATE_INIT		=	FALSE						# trigger whether to generate all variables as output for init_rep
)
rm(list=ls())
dirHOME			=	"F:/Manqi/software/PCLakeMQ_topic3/Licence_agreement/I_accept/"				# location of the PCModel1350 folder
fileDATM		=	"PL613162 - default.xls"												              # file name of the DATM implementation
source(paste(dirHOME,"PCModel1350/PCModel/3.00/Models/PCLake/6.13.16/PCShell/scripts/R_system/functions_PCLake.R",sep=""))
lDATM_SETTINGS		=	PCModelReadDATMFile(dirHOME=dirHOME,
fileDATM=fileDATM)
lMODEL_SETUP		=	PCModelSetup(
dfSTATES=lDATM_SETTINGS$states,
dfPARAMS=lDATM_SETTINGS$params,
dfAUXIL=lDATM_SETTINGS$auxils,
dfRUNSETTINGS=lDATM_SETTINGS$run_settings,
dirHOME=dirHOME,
sediment_type       = 	0,                          # available sediment types: 0=default settings (/source_cpp/*sp.cpp), 1=clay, 2=peat, 3=sand
work_case           =	"R_base_work_case",         # name of output folder (work case)
modelname 			=	"_org",					              	# name of the model (suffix to specific model files)
tGENERATE_INIT		=	FALSE						# trigger whether to generate all variables as output for init_rep
)
PCModelCompileModel(dirHOME=dirHOME)
lMODEL_INIT			=	PCModelInitializeModel(dfSTATES=lDATM_SETTINGS$states,
dfPARAMS=lDATM_SETTINGS$params, # parameters worden waarschijnlijk niet aangepast obv
dirHOME=dirHOME)
dfRUNSETTINGS		=	lDATM_SETTINGS$run_settings
dirMODEL			=	paste(dirHOME,"PCModel1350/PCModel/3.00/Models/PCLake/6.13.16/PCShell/","scripts/cpp2R/",sep='')
fREP_START_YEAR		=	dfRUNSETTINGS[which(rownames(dfRUNSETTINGS)=="dRepStart"),1]
fAVG_START_YEAR		=	dfRUNSETTINGS[which(rownames(dfRUNSETTINGS)=="dAvgStart"),1]
fAVG_START_DAY		=	dfRUNSETTINGS[which(rownames(dfRUNSETTINGS)=="dAvgStartWithinYear"),1]
fAVG_END_DAY		=	dfRUNSETTINGS[which(rownames(dfRUNSETTINGS)=="dAvgEndWithinYear"),1]
internal_time_step <- dfRUNSETTINGS[which(rownames(dfRUNSETTINGS)=="dIntStep"),1]
runtime_years      <- dfRUNSETTINGS[which(rownames(dfRUNSETTINGS)=="dReady"),1] # model run time (in years)
output_time_step   <- dfRUNSETTINGS[which(rownames(dfRUNSETTINGS)=="dRepStep"),1] # time step at which output is generated (in days)
times 			<- seq(0,365*runtime_years,by=output_time_step)  # output time step
dyn.load("model.dll")
ode(y=lMODEL_INIT$states_init[,3], times=times, func = "CalculateDerivatives", parms = lMODEL_INIT$params_init[,4],
dllname = "model",initforc = "forcc",forcings=lDATM_SETTINGS$forcings,initfunc = "initmod",
nout = 1, outnames = c('oChla'), method = "rk4")
output<-ode(y=lMODEL_INIT$states_init[,3], times=times, func = "CalculateDerivatives", parms = lMODEL_INIT$params_init[,4],
dllname = "model",initforc = "forcc",forcings=lDATM_SETTINGS$forcings,initfunc = "initmod",
nout = 1, outnames = c('oChla'), method = "rk4")
output
output<-ode(y=lMODEL_INIT$states_init[,3], times=times, func = "CalculateDerivatives", parms = lMODEL_INIT$params_init[,4],
dllname = "model",initforc = "forcc",forcings=lDATM_SETTINGS$forcings,initfunc = "initmod",
nout = 1, outnames = c('oChla'), method = "vode")
output
rm(list=ls())
dirHOME			=	"F:/Manqi/software/PCLakeMQ_topic3/Licence_agreement/I_accept/"				# location of the PCModel1350 folder
fileDATM		=	"PL613162_rebuildv11_surf_v53.xls"												              # file name of the DATM implementation
source(paste(dirHOME,"PCModel1350/PCModel/3.00/Models/PCLake/6.13.16/PCShell/scripts/R_system/functions_PCLake.R",sep=""))
lDATM_SETTINGS		=	PCModelReadDATMFile(dirHOME=dirHOME,
fileDATM=fileDATM)
lMODEL_SETUP		=	PCModelSetup(
dfSTATES=lDATM_SETTINGS$states,
dfPARAMS=lDATM_SETTINGS$params,
dfAUXIL=lDATM_SETTINGS$auxils,
dfRUNSETTINGS=lDATM_SETTINGS$run_settings,
dirHOME=dirHOME,
sediment_type       = 	0,                          # available sediment types: 0=default settings (/source_cpp/*sp.cpp), 1=clay, 2=peat, 3=sand
work_case           =	"R_base_work_case",         # name of output folder (work case)
modelname 			=	"_org",					              	# name of the model (suffix to specific model files)
tGENERATE_INIT		=	FALSE						# trigger whether to generate all variables as output for init_rep
)
PCModelCompileModel(dirHOME=dirHOME)
